# Test 1: Start with a simple sanity checking test which uses singleLevel
# iterators as the backing iterator for the sstable. This will also test the
# compaction iterator since it's the simplest.
build
a.SET.1:a
b.SET.1:b
c.SET.1:c
d.SET.1:d
----
point:    [a#1,1-d#1,1]
seqnums:  [1-1]

# Note that the RawKeySize,RawValueSize aren't accurate here because we use
# Reader.EstimateDiskUsage with virtual sstables bounds to determine virtual
# sstable size which is then used to extrapolate virtual sstable properties,
# and for tiny sstables, virtual sstable sizes aren't accurate. In this
# testcase, the virtual sstable size is 50, whereas the backing sstable size is
# 850.
virtualize b.SET.1-c.SET.1
----
bounds:  [b#1,1-c#1,1]
filenum: 000002
props: NumEntries: 1, RawKeySize: 3, RawValueSize: 1, RawPointTombstoneKeySize: 0, RawPointTombstoneValueSize: 0, NumSizedDeletions: 0, NumDeletions: 0, NumRangeDeletions: 0, NumRangeKeyDels: 0, NumRangeKeySets: 0, ValueBlocksSize: 0

citer
----
b#1,1:b
c#1,1:c

# Test 2: Similar to test 1 but force two level iterators.
build twoLevel
a.SET.1:a
b.SET.1:b
c.SET.1:c
d.SET.1:d
----
point:    [a#1,1-d#1,1]
seqnums:  [1-1]

virtualize b.SET.1-c.SET.1
----
bounds:  [b#1,1-c#1,1]
filenum: 000004
props: NumEntries: 1, RawKeySize: 3, RawValueSize: 1, RawPointTombstoneKeySize: 0, RawPointTombstoneValueSize: 0, NumSizedDeletions: 0, NumDeletions: 0, NumRangeDeletions: 0, NumRangeKeyDels: 0, NumRangeKeySets: 0, ValueBlocksSize: 0

citer
----
b#1,1:b
c#1,1:c

# Test the constrain bounds function. It performs some subtle shrinking and
# expanding of bounds. The current virtual sstable bounds are [b,c].
# 1. start key < virtual sstable start key, end key is exclusive.
constrain a,bb,false
----
b,bb,false

# 2. start key < virtual sstable start key, end key is inclusive.
constrain a,bb,true
----
b,bb,true

# 3. start key is within virtual sstable bounds, end key is at virtual sstable
# end bound, but is exclusive.
constrain bb,c,false
----
bb,c,false

# 3. start key is within virtual sstable bounds, end key is at virtual sstable
# end bound, but is inclusive.
constrain bb,c,true
----
bb,c,true

# 4. start key is within virtual sstable bounds, end key is above virtual
# sstable end bound and is exclusive.
constrain bb,e,false
----
bb,c,true

# 5. start key is within virtual sstable bounds, end key is above virtual
# sstable end bound and is inclusive.
constrain bb,e,true
----
bb,c,true

# 6. Both start, end keys fit within virtual sstable bounds.
constrain bb,bbb,false
----
bb,bbb,false

# 6. Both start, end keys are out of bounds, but overlap.
constrain a,d,false
----
b,c,true

# 7. start, end keys have no overlap with virtual sstable bounds. Note that
# lower becomes greater than upper here. We support this in the iterators
# and don't return any keys for this case.
constrain a,aa,false
----
b,aa,false

scan-range-del
----

scan-range-key
----

# Test 3: Tests raw range key/range del iterators, and makes sure that they
# respect virtual bounds.
build twoLevel
a.SET.1:a
d.SET.2:d
f.SET.3:f
d.RANGEDEL.4:e
rangekey: a-d:{(#11,RANGEKEYSET,@t10,foo)}
g.RANGEDEL.5:l
rangekey: y-z:{(#12,RANGEKEYSET,@t11,foo)}
----
point:    [a#1,1-f#3,1]
rangedel: [d#4,15-l#72057594037927935,15]
rangekey: [a#11,21-z#72057594037927935,21]
seqnums:  [1-12]

# Note that we shouldn't have range del spans which cross virtual sstable
# boundaries. NumRangeKeySets must be > 1.
virtualize a.SET.1-f.SET.1
----
bounds:  [a#1,1-f#1,1]
filenum: 000006
props: NumEntries: 1, RawKeySize: 5, RawValueSize: 1, RawPointTombstoneKeySize: 0, RawPointTombstoneValueSize: 0, NumSizedDeletions: 0, NumDeletions: 1, NumRangeDeletions: 1, NumRangeKeyDels: 0, NumRangeKeySets: 1, ValueBlocksSize: 0

scan-range-del
----
d-e:{(#4,RANGEDEL)}

scan-range-key
----
a-d:{(#11,RANGEKEYSET,@t10,foo)}

# Test 4: Test iterators with various bounds, and various operations. This calls
# VirtualReader.NewIterWithBlockPropertyFilters and performs various operations
# on those.
build
a.SET.1:a
b.SET.2:b
c.SET.3:c
d.SET.4:d
dd.SET.5:dd
ddd.SET.6:ddd
g.SET.8:g
h.SET.9:h
----
point:    [a#1,1-h#9,1]
seqnums:  [1-9]
